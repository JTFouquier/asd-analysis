else
{
sigP = c(sigP, pvalue)
}
tvalue = round((fixedEffects[j,3]), 2)
t_value = c(t_value, tvalue)
if (j == 2)
{
# only print the taxon name once
taxa = c(taxa, colnames(metaData)[i], " ", " ")
# loopImportance = c(loopImportance, importance[i], " ", " ")
}
}
# for (i in importance)
# {
#   loopImportance = c(loopImportance, i)
# }
#in the reduced model aka null model, ASD is removed, so any significance is due to ASD
#null.glmm = lmer(factor ~ (1|Cohort)+(1+ConstipationDiarrheaAbdominalPain_GI_Score|Cohort), data=metaData, REML = FALSE)
# null.glmm = lmer(factor ~ ConstipationDiarrheaAbdominalPain_GI_Score+(1|Cohort), data=metaData, REML = FALSE)
# Anova = {anova(null.glmm,full.glmm,refit=FALSE)}
# print(Anova)
stats.results = data.frame(taxa, loopImportance, variable, sigP, t_value)
stats.results$fdr.p = p.adjust(stats.results$sigP, method = "fdr")
stats.results$bonferroni.p = p.adjust(stats.results$sigP, method = "bonferroni")
# for genus table
write.table(x = stats.results, file = "importantFeatureGenusLevelTable_pvalue_tvalue_genus.test.tsv", col.names = TRUE, row.names = FALSE, append = FALSE, sep = "\t")
#write.table(x = stats.results, file = "importantFeatureASVLevelTable_pvalue_tvalue.tsv", col.names = TRUE, row.names = FALSE, append = FALSE, sep = "\t")
}# close outer forloop
for (i in taxa_abundance_start:taxa_abundance_end) {
#print(colnames(metaData)[i])
factor = unlist(metaData[i])
for (value in 1:nrow(taxaName))
{
#print("second name: ")
print(taxaName[value,1])
#print (taxaName[value,2])
#print (unlist(rownames(taxaName[2])))
if (taxaName[value,1] == colnames(metaData)[i])
{
importance = taxaName[value,2]
#print ("importance is: ", importance)
loopImportance = c(loopImportance, value, " ", " ")
}
}
#how is the microbiome affected by ASD when giving AZ and CO random intercepts
### model fails to converge when GI is used as a random effect
## The random effect states there is by cohort variablity for the taxa being looked at. It is possible that
## this model is overfitted (random structure is too complex to be supported by data) when a microbe is the same for
## bot       FALSE) h cohorts
full.glmm = glm(factor ~ ASD+ConstipationDiarrheaAbdominalPain_GI_Score+Cohort, data=metaData)
#print("full model summary" )
fullSummary = summary(full.glmm)
# print(fullSummary)
fixedEffects = (coef(fullSummary))
#print(fixedEffects)
# vector holding ASD and GI score labels
variable = c(variable, ASDyes, GIScore, location )
## this forloop will obtain the pvalue and tvalue for each taxa in file, these values will later be written to a file
for (j in 2:4)
{
pvalue = round((fixedEffects[j,4]), 2)
if (pvalue < 0.05)
{
sigPvalue = paste ("* ", pvalue)
sigP = c(sigP, sigPvalue)
}
else
{
sigP = c(sigP, pvalue)
}
tvalue = round((fixedEffects[j,3]), 2)
t_value = c(t_value, tvalue)
if (j == 2)
{
# only print the taxon name once
taxa = c(taxa, colnames(metaData)[i], " ", " ")
# loopImportance = c(loopImportance, importance[i], " ", " ")
}
}
# for (i in importance)
# {
#   loopImportance = c(loopImportance, i)
# }
#in the reduced model aka null model, ASD is removed, so any significance is due to ASD
#null.glmm = lmer(factor ~ (1|Cohort)+(1+ConstipationDiarrheaAbdominalPain_GI_Score|Cohort), data=metaData, REML = FALSE)
# null.glmm = lmer(factor ~ ConstipationDiarrheaAbdominalPain_GI_Score+(1|Cohort), data=metaData, REML = FALSE)
# Anova = {anova(null.glmm,full.glmm,refit=FALSE)}
# print(Anova)
stats.results = data.frame(taxa, loopImportance, variable, sigP, t_value)
stats.results$fdr.p = p.adjust(stats.results$sigP, method = "fdr")
stats.results$bonferroni.p = p.adjust(stats.results$sigP, method = "bonferroni")
# for genus table
write.table(x = stats.results, file = "importantFeatureGenusLevelTable_pvalue_tvalue_genus.test.tsv", col.names = TRUE, row.names = FALSE, append = FALSE, sep = "\t")
#write.table(x = stats.results, file = "importantFeatureASVLevelTable_pvalue_tvalue.tsv", col.names = TRUE, row.names = FALSE, append = FALSE, sep = "\t")
}# close outer forloop
#install.packages("lme4")
#install.packages("lmerTest")
#install.packages("afex")
#install.packages("data.table")
### these packages will give me a pvalue in the anova summary
#library(data.table)
#library(lmerTest)
#library(afex)
#library(lme4)
rm(list = ls())
## where the files will be saved that are produce by ths script
setwd("/Users/Nancy/Documents/Autism_Project/qiime2redo/mergedTables/combinedCohortsAnalysis/final_analysis/genus")
# for genus table
metaData = read.csv("/Users/Nancy/Documents/Autism_Project/qiime2redo/mergedTables/combinedCohortsAnalysis/final_analysis/combineCohorts_metadata.genus.csv")
#metaData = read.csv("/Users/Nancy/Documents/Autism_Project/qiime2redo/mergedTables/combinedCohortsAnalysis/randomForest1016/tableRandomForest/combineCohorts_metadata_withImportantASVs.csv")
#ASV_Tax_match = read.csv("/Users/Nancy/Documents/Autism_Project/qiime2redo/mergedTables/combinedCohortsAnalysis/randomForest1016/randomForest_ASV&taxonomy_Match_.csv")
#metaData2 = fread("/Users/Nancy/Documents/Autism_Project/qiime2redo/mergedTables/combinedCohortsAnalysis/randomForest1016/tableRandomForest/combineCohorts_metadata_withImportantASVs.csv")
#df.metaData2 = data.frame(metaData2)
taxaName = read.csv("/Users/Nancy/Documents/Autism_Project/qiime2redo/mergedTables/combinedCohortsAnalysis/final_analysis/genus/randomForestGenus/feature_importance_0.01.csv")
# loop through columns of csv that have my taxa counts
taxa_abundance_start = 33
# for genus table
taxa_abundance_end = 35
# for ASV table
#taxa_abundance_end = 45
#taxa_abundance_end = 49
# fixed effects of the model
ASDyes = "ASD"
GIScore = "GI Score"
location = "change between AZ and CO"
# vectors to hold data that will be written to file
taxa = c()
variable = c()
sigP = c()
t_value = c()
#importance = scan ('importance_taxa_A-Z.txt')
loopImportance = c()
#start forloop
for (i in taxa_abundance_start:taxa_abundance_end) {
#print(colnames(metaData)[i])
factor = unlist(metaData[i])
for (value in 1:nrow(taxaName))
{
#print("second name: ")
print(taxaName[value,1])
#print (taxaName[value,2])
#print (unlist(rownames(taxaName[2])))
if (taxaName[value,1] == colnames(metaData)[i])
{
importance = taxaName[value,2]
#print ("importance is: ", importance)
loopImportance = c(loopImportance, value, " ", " ")
}
}
#how is the microbiome affected by ASD when giving AZ and CO random intercepts
### model fails to converge when GI is used as a random effect
## The random effect states there is by cohort variablity for the taxa being looked at. It is possible that
## this model is overfitted (random structure is too complex to be supported by data) when a microbe is the same for
## bot       FALSE) h cohorts
full.glmm = glm(factor ~ ASD+ConstipationDiarrheaAbdominalPain_GI_Score+Cohort, data=metaData)
#print("full model summary" )
fullSummary = summary(full.glmm)
# print(fullSummary)
fixedEffects = (coef(fullSummary))
#print(fixedEffects)
# vector holding ASD and GI score labels
variable = c(variable, ASDyes, GIScore, location )
## this forloop will obtain the pvalue and tvalue for each taxa in file, these values will later be written to a file
for (j in 2:4)
{
pvalue = round((fixedEffects[j,4]), 2)
if (pvalue < 0.05)
{
sigPvalue = paste ("* ", pvalue)
sigP = c(sigP, sigPvalue)
}
else
{
sigP = c(sigP, pvalue)
}
tvalue = round((fixedEffects[j,3]), 2)
t_value = c(t_value, tvalue)
if (j == 2)
{
# only print the taxon name once
taxa = c(taxa, colnames(metaData)[i], " ", " ")
# loopImportance = c(loopImportance, importance[i], " ", " ")
}
}
# for (i in importance)
# {
#   loopImportance = c(loopImportance, i)
# }
#in the reduced model aka null model, ASD is removed, so any significance is due to ASD
#null.glmm = lmer(factor ~ (1|Cohort)+(1+ConstipationDiarrheaAbdominalPain_GI_Score|Cohort), data=metaData, REML = FALSE)
# null.glmm = lmer(factor ~ ConstipationDiarrheaAbdominalPain_GI_Score+(1|Cohort), data=metaData, REML = FALSE)
# Anova = {anova(null.glmm,full.glmm,refit=FALSE)}
# print(Anova)
stats.results = data.frame(taxa, loopImportance, variable, sigP, t_value)
stats.results$fdr.p = p.adjust(stats.results$sigP, method = "fdr")
stats.results$bonferroni.p = p.adjust(stats.results$sigP, method = "bonferroni")
# for genus table
write.table(x = stats.results, file = "importantFeatureGenusLevelTable_pvalue_tvalue_genus.test.tsv", col.names = TRUE, row.names = FALSE, append = FALSE, sep = "\t")
#write.table(x = stats.results, file = "importantFeatureASVLevelTable_pvalue_tvalue.tsv", col.names = TRUE, row.names = FALSE, append = FALSE, sep = "\t")
}# close outer forloop
#r = data.frame(taxa, loopImportance, variable, sigP, t_value)
#write.table(x = r, file = "importantFeatureGenusLevelTable_pvalue_tvalue_genus.test2.tsv", col.names = TRUE, row.names = FALSE, append = FALSE, sep = "\t")
for (i in taxa_abundance_start:taxa_abundance_end) {
#print(colnames(metaData)[i])
factor = unlist(metaData[i])
for (value in 1:nrow(taxaName))
{
#print("second name: ")
print(taxaName[value,0])
#print (taxaName[value,2])
#print (unlist(rownames(taxaName[2])))
if (taxaName[value,1] == colnames(metaData)[i])
{
importance = taxaName[value,2]
#print ("importance is: ", importance)
loopImportance = c(loopImportance, value, " ", " ")
}
}
#how is the microbiome affected by ASD when giving AZ and CO random intercepts
### model fails to converge when GI is used as a random effect
## The random effect states there is by cohort variablity for the taxa being looked at. It is possible that
## this model is overfitted (random structure is too complex to be supported by data) when a microbe is the same for
## bot       FALSE) h cohorts
full.glmm = glm(factor ~ ASD+ConstipationDiarrheaAbdominalPain_GI_Score+Cohort, data=metaData)
#print("full model summary" )
fullSummary = summary(full.glmm)
# print(fullSummary)
fixedEffects = (coef(fullSummary))
#print(fixedEffects)
# vector holding ASD and GI score labels
variable = c(variable, ASDyes, GIScore, location )
## this forloop will obtain the pvalue and tvalue for each taxa in file, these values will later be written to a file
for (j in 2:4)
{
pvalue = round((fixedEffects[j,4]), 2)
if (pvalue < 0.05)
{
sigPvalue = paste ("* ", pvalue)
sigP = c(sigP, sigPvalue)
}
else
{
sigP = c(sigP, pvalue)
}
tvalue = round((fixedEffects[j,3]), 2)
t_value = c(t_value, tvalue)
if (j == 2)
{
# only print the taxon name once
taxa = c(taxa, colnames(metaData)[i], " ", " ")
# loopImportance = c(loopImportance, importance[i], " ", " ")
}
}
# for (i in importance)
# {
#   loopImportance = c(loopImportance, i)
# }
#in the reduced model aka null model, ASD is removed, so any significance is due to ASD
#null.glmm = lmer(factor ~ (1|Cohort)+(1+ConstipationDiarrheaAbdominalPain_GI_Score|Cohort), data=metaData, REML = FALSE)
# null.glmm = lmer(factor ~ ConstipationDiarrheaAbdominalPain_GI_Score+(1|Cohort), data=metaData, REML = FALSE)
# Anova = {anova(null.glmm,full.glmm,refit=FALSE)}
# print(Anova)
stats.results = data.frame(taxa, loopImportance, variable, sigP, t_value)
stats.results$fdr.p = p.adjust(stats.results$sigP, method = "fdr")
stats.results$bonferroni.p = p.adjust(stats.results$sigP, method = "bonferroni")
# for genus table
write.table(x = stats.results, file = "importantFeatureGenusLevelTable_pvalue_tvalue_genus.test.tsv", col.names = TRUE, row.names = FALSE, append = FALSE, sep = "\t")
#write.table(x = stats.results, file = "importantFeatureASVLevelTable_pvalue_tvalue.tsv", col.names = TRUE, row.names = FALSE, append = FALSE, sep = "\t")
}# close outer forloop
for (i in taxa_abundance_start:taxa_abundance_end) {
#print(colnames(metaData)[i])
factor = unlist(metaData[i])
for (value in 1:nrow(taxaName))
{
#print("second name: ")
print(taxaName[value,1])
#print (taxaName[value,2])
#print (unlist(rownames(taxaName[2])))
if (taxaName[value,1] == colnames(metaData)[i])
{
importance = taxaName[value,2]
#print ("importance is: ", importance)
loopImportance = c(loopImportance, value, " ", " ")
}
}
#how is the microbiome affected by ASD when giving AZ and CO random intercepts
### model fails to converge when GI is used as a random effect
## The random effect states there is by cohort variablity for the taxa being looked at. It is possible that
## this model is overfitted (random structure is too complex to be supported by data) when a microbe is the same for
## bot       FALSE) h cohorts
full.glmm = glm(factor ~ ASD+ConstipationDiarrheaAbdominalPain_GI_Score+Cohort, data=metaData)
#print("full model summary" )
fullSummary = summary(full.glmm)
# print(fullSummary)
fixedEffects = (coef(fullSummary))
#print(fixedEffects)
# vector holding ASD and GI score labels
variable = c(variable, ASDyes, GIScore, location )
## this forloop will obtain the pvalue and tvalue for each taxa in file, these values will later be written to a file
for (j in 2:4)
{
pvalue = round((fixedEffects[j,4]), 2)
if (pvalue < 0.05)
{
sigPvalue = paste ("* ", pvalue)
sigP = c(sigP, sigPvalue)
}
else
{
sigP = c(sigP, pvalue)
}
tvalue = round((fixedEffects[j,3]), 2)
t_value = c(t_value, tvalue)
if (j == 2)
{
# only print the taxon name once
taxa = c(taxa, colnames(metaData)[i], " ", " ")
# loopImportance = c(loopImportance, importance[i], " ", " ")
}
}
# for (i in importance)
# {
#   loopImportance = c(loopImportance, i)
# }
#in the reduced model aka null model, ASD is removed, so any significance is due to ASD
#null.glmm = lmer(factor ~ (1|Cohort)+(1+ConstipationDiarrheaAbdominalPain_GI_Score|Cohort), data=metaData, REML = FALSE)
# null.glmm = lmer(factor ~ ConstipationDiarrheaAbdominalPain_GI_Score+(1|Cohort), data=metaData, REML = FALSE)
# Anova = {anova(null.glmm,full.glmm,refit=FALSE)}
# print(Anova)
stats.results = data.frame(taxa, loopImportance, variable, sigP, t_value)
stats.results$fdr.p = p.adjust(stats.results$sigP, method = "fdr")
stats.results$bonferroni.p = p.adjust(stats.results$sigP, method = "bonferroni")
# for genus table
write.table(x = stats.results, file = "importantFeatureGenusLevelTable_pvalue_tvalue_genus.test.tsv", col.names = TRUE, row.names = FALSE, append = FALSE, sep = "\t")
#write.table(x = stats.results, file = "importantFeatureASVLevelTable_pvalue_tvalue.tsv", col.names = TRUE, row.names = FALSE, append = FALSE, sep = "\t")
}# close outer forloop
for (i in taxa_abundance_start:taxa_abundance_end) {
#print(colnames(metaData)[i])
factor = unlist(metaData[i])
for (value in 1:nrow(taxaName))
{
#print("second name: ")
print(taxaName[value, 1])
#print (taxaName[value,2])
#print (unlist(rownames(taxaName[2])))
if (taxaName[value, 1] == colnames(metaData)[i])
{
importance = taxaName[value,2]
#print ("importance is: ", importance)
loopImportance = c(loopImportance, value, " ", " ")
}
}
#how is the microbiome affected by ASD when giving AZ and CO random intercepts
### model fails to converge when GI is used as a random effect
## The random effect states there is by cohort variablity for the taxa being looked at. It is possible that
## this model is overfitted (random structure is too complex to be supported by data) when a microbe is the same for
## bot       FALSE) h cohorts
full.glmm = glm(factor ~ ASD+ConstipationDiarrheaAbdominalPain_GI_Score+Cohort, data=metaData)
#print("full model summary" )
fullSummary = summary(full.glmm)
# print(fullSummary)
fixedEffects = (coef(fullSummary))
#print(fixedEffects)
# vector holding ASD and GI score labels
variable = c(variable, ASDyes, GIScore, location )
## this forloop will obtain the pvalue and tvalue for each taxa in file, these values will later be written to a file
for (j in 2:4)
{
pvalue = round((fixedEffects[j,4]), 2)
if (pvalue < 0.05)
{
sigPvalue = paste ("* ", pvalue)
sigP = c(sigP, sigPvalue)
}
else
{
sigP = c(sigP, pvalue)
}
tvalue = round((fixedEffects[j,3]), 2)
t_value = c(t_value, tvalue)
if (j == 2)
{
# only print the taxon name once
taxa = c(taxa, colnames(metaData)[i], " ", " ")
# loopImportance = c(loopImportance, importance[i], " ", " ")
}
}
# for (i in importance)
# {
#   loopImportance = c(loopImportance, i)
# }
#in the reduced model aka null model, ASD is removed, so any significance is due to ASD
#null.glmm = lmer(factor ~ (1|Cohort)+(1+ConstipationDiarrheaAbdominalPain_GI_Score|Cohort), data=metaData, REML = FALSE)
# null.glmm = lmer(factor ~ ConstipationDiarrheaAbdominalPain_GI_Score+(1|Cohort), data=metaData, REML = FALSE)
# Anova = {anova(null.glmm,full.glmm,refit=FALSE)}
# print(Anova)
stats.results = data.frame(taxa, loopImportance, variable, sigP, t_value)
stats.results$fdr.p = p.adjust(stats.results$sigP, method = "fdr")
stats.results$bonferroni.p = p.adjust(stats.results$sigP, method = "bonferroni")
# for genus table
write.table(x = stats.results, file = "importantFeatureGenusLevelTable_pvalue_tvalue_genus.test.tsv", col.names = TRUE, row.names = FALSE, append = FALSE, sep = "\t")
#write.table(x = stats.results, file = "importantFeatureASVLevelTable_pvalue_tvalue.tsv", col.names = TRUE, row.names = FALSE, append = FALSE, sep = "\t")
}# close outer forloop
#install.packages("lme4")
#install.packages("lmerTest")
#install.packages("afex")
#install.packages("data.table")
### these packages will give me a pvalue in the anova summary
#library(data.table)
#library(lmerTest)
#library(afex)
#library(lme4)
rm(list = ls())
## where the files will be saved that are produce by ths script
setwd("/Users/Nancy/Documents/Autism_Project/qiime2redo/mergedTables/combinedCohortsAnalysis/final_analysis/genus")
# for genus table
metaData = read.csv("/Users/Nancy/Documents/Autism_Project/qiime2redo/mergedTables/combinedCohortsAnalysis/final_analysis/combineCohorts_metadata.genus.csv")
#metaData = read.csv("/Users/Nancy/Documents/Autism_Project/qiime2redo/mergedTables/combinedCohortsAnalysis/randomForest1016/tableRandomForest/combineCohorts_metadata_withImportantASVs.csv")
#ASV_Tax_match = read.csv("/Users/Nancy/Documents/Autism_Project/qiime2redo/mergedTables/combinedCohortsAnalysis/randomForest1016/randomForest_ASV&taxonomy_Match_.csv")
#metaData2 = fread("/Users/Nancy/Documents/Autism_Project/qiime2redo/mergedTables/combinedCohortsAnalysis/randomForest1016/tableRandomForest/combineCohorts_metadata_withImportantASVs.csv")
#df.metaData2 = data.frame(metaData2)
#taxaName = read.csv("/Users/Nancy/Documents/Autism_Project/qiime2redo/mergedTables/combinedCohortsAnalysis/final_analysis/genus/randomForestGenus/feature_importance_0.01.csv")
# loop through columns of csv that have my taxa counts
taxa_abundance_start = 33
# for genus table
taxa_abundance_end = 73
# for ASV table
#taxa_abundance_end = 45
#taxa_abundance_end = 49
# fixed effects of the model
ASDyes = "ASD"
GIScore = "GI Score"
location = "change between AZ and CO"
# vectors to hold data that will be written to file
taxa = c()
variable = c()
sigP = c()
t_value = c()
#importance = scan ('importance_taxa_A-Z.txt')
#loopImportance = c()
#start forloop
for (i in taxa_abundance_start:taxa_abundance_end) {
#print(colnames(metaData)[i])
factor = unlist(metaData[i])
# for (value in 1:nrow(taxaName))
# {
#   #print("second name: ")
#   print(taxaName[value, 1])
#  #print (taxaName[value,2])
#   #print (unlist(rownames(taxaName[2])))
#   if (taxaName[value, 1] == colnames(metaData)[i])
#   {
#      importance = taxaName[value,2]
#      #print ("importance is: ", importance)
#      loopImportance = c(loopImportance, value, " ", " ")
#   }
# }
#
#how is the microbiome affected by ASD when giving AZ and CO random intercepts
### model fails to converge when GI is used as a random effect
## The random effect states there is by cohort variablity for the taxa being looked at. It is possible that
## this model is overfitted (random structure is too complex to be supported by data) when a microbe is the same for
## bot       FALSE) h cohorts
full.glmm = glm(factor ~ ASD+ConstipationDiarrheaAbdominalPain_GI_Score+Cohort, data=metaData)
#print("full model summary" )
fullSummary = summary(full.glmm)
# print(fullSummary)
fixedEffects = (coef(fullSummary))
#print(fixedEffects)
# vector holding ASD and GI score labels
variable = c(variable, ASDyes, GIScore, location )
## this forloop will obtain the pvalue and tvalue for each taxa in file, these values will later be written to a file
for (j in 2:4)
{
pvalue = round((fixedEffects[j,4]), 2)
if (pvalue < 0.05)
{
sigPvalue = paste ("* ", pvalue)
sigP = c(sigP, sigPvalue)
}
else
{
sigP = c(sigP, pvalue)
}
tvalue = round((fixedEffects[j,3]), 2)
t_value = c(t_value, tvalue)
if (j == 2)
{
# only print the taxon name once
taxa = c(taxa, colnames(metaData)[i], " ", " ")
# loopImportance = c(loopImportance, importance[i], " ", " ")
}
}
# for (i in importance)
# {
#   loopImportance = c(loopImportance, i)
# }
#in the reduced model aka null model, ASD is removed, so any significance is due to ASD
#null.glmm = lmer(factor ~ (1|Cohort)+(1+ConstipationDiarrheaAbdominalPain_GI_Score|Cohort), data=metaData, REML = FALSE)
# null.glmm = lmer(factor ~ ConstipationDiarrheaAbdominalPain_GI_Score+(1|Cohort), data=metaData, REML = FALSE)
# Anova = {anova(null.glmm,full.glmm,refit=FALSE)}
# print(Anova)
stats.results = data.frame(taxa, variable, sigP, t_value)
stats.results$fdr.p = p.adjust(stats.results$sigP, method = "fdr")
stats.results$bonferroni.p = p.adjust(stats.results$sigP, method = "bonferroni")
# for genus table
write.table(x = stats.results, file = "importantFeatureGenusLevelTable_pvalue_tvalue_genus.tsv", col.names = TRUE, row.names = FALSE, append = FALSE, sep = "\t")
#write.table(x = stats.results, file = "importantFeatureASVLevelTable_pvalue_tvalue.tsv", col.names = TRUE, row.names = FALSE, append = FALSE, sep = "\t")
}# close outer forloop
#r = data.frame(taxa, loopImportance, variable, sigP, t_value)
#write.table(x = r, file = "importantFeatureGenusLevelTable_pvalue_tvalue_genus.test2.tsv", col.names = TRUE, row.names = FALSE, append = FALSE, sep = "\t")
